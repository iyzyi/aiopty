# Extract relevant code from sys/unix
# Need: python, git, gofmt

import os
import re
import shutil
import stat
import subprocess


def extract():
    # clean
    base = os.path.join(os.getcwd(), "sys")
    dir = os.path.join(base, "unix")
    if os.path.exists(base):
        shutil.rmtree(base, onerror=delete)
    # exec_cmd("del *.go")
    for file in os.listdir(os.getcwd()):
        path = os.path.join(os.getcwd(), file)
        if file[-3:] == '.go' and os.path.isfile(path):
            os.remove(path)

    # git clone
    ret = exec_cmd('git clone https://github.com/golang/sys')
    if not ret:
        return

    const_dict = {}
    type_dict = {}
    for file in os.listdir(dir):
        # extract const
        keyword = ['TIOCGETA', 'TIOCSETA', 'TCGETS', 'TCSETS',
                   'IGNBRK', 'BRKINT', 'PARMRK', 'ISTRIP', 'INLCR', 'IGNCR', 'ICRNL', 'IXON',
                   'OPOST',
                   'ECHO', 'ECHONL', 'ICANON', 'ISIG', 'IEXTEN',
                   'CSIZE', 'PARENB',
                   'CS8',
                   'VMIN', 'VTIME']
        res = re.search(r'^zerrors(.*?)\.go$', file)
        if res:
            label = res.group(1)
            with open(os.path.join(dir, file), 'r') as f:
                input = f.read()
                output = ''
                for key in keyword:
                    output += search_const(input, key) + '\n'
            output = re.sub(r'\n{2,}', '\n', output)
            res = re.search(r'\S', output)
            if res:
                const_dict[label] = f'const({output})\n'

        # extract type
        keyword = ['Termios']
        res = re.search(r'^ztypes(.*?)\.go$', file)
        if res:
            label = res.group(1)
            with open(os.path.join(dir, file), 'r') as f:
                input = f.read()
                output = ''
                for key in keyword:
                    output += search_type(input, key) + '\n\n'
            res = re.search(r'\S', output)
            if res:
                type_dict[label] = output

    # generate *.go file
    for label in set(list(const_dict.keys()) + list(type_dict.keys())):
        output = ''
        if label in const_dict.keys():
            output += const_dict[label]
        if label in type_dict.keys():
            output += type_dict[label]
        package = 'export'
        output = f'// Code generated by extract.py. DO NOT EDIT.\n\npackage {package}\n{output}'
        with open(f'{package}{label}.go', 'w') as f:
            f.write(output)
    exec_cmd('gofmt -w .')

    # clean
    if os.path.exists(base):
        shutil.rmtree(base, onerror=delete)


def exec_cmd(cmd):
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(result.stderr)
        return False
    return True


def search_const(input, key):
    res = re.search(key + r'\s.*?=\s.*?(0x)?[0-9a-fA-F]+', input)
    if res:
        return res.group()
    return ''


def search_type(input, key):
    res = re.search(r'type\s' + key + '\sstruct\s\{.*?}', input, re.S)
    if res:
        return res.group()
    return ''


def delete(func, path, execinfo):
    os.chmod(path, stat.S_IWUSR)
    func(path)


if __name__ == '__main__':
    extract()
